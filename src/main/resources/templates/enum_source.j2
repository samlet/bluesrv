package com.bluecc.bluesrv.common;

import com.google.common.collect.ArrayListMultimap;
import com.google.common.collect.Multimap;

import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import lombok.Getter;

public enum {{e.typeName}} implements IEnumeration<{{e.typeName}}>{
    {% for f in e.types -%}
    {{f.typeId}}("{{f.typeId}}", "{{f.parentTypeId}}", "{{f.description}}"){% if not loop.last %},{% endif %}
    {% endfor %};

    private static final Map<String, {{e.typeName}}> BY_TYPE = new HashMap<>();
    private static final Multimap<String, {{e.typeName}}> BY_PARENT_TYPE = ArrayListMultimap.create();

    static {
        for ({{e.typeName}} e : values()) {
            BY_TYPE.put(e.typeId, e);
            BY_PARENT_TYPE.put(e.parentType, e);
        }
    }

    @Getter(onMethod_ = {@Override})
    public final String typeId;
    @Getter(onMethod_ = {@Override})
    public final String parentType;
    @Getter(onMethod_ = {@Override})
    public final String description;

    private {{e.typeName}}(String typeId, String parentType, String description) {
        this.typeId = typeId;
        this.parentType = parentType;
        this.description = description;
    }

    public static {{e.typeName}} valueOfType(String typeId) {
        return BY_TYPE.get(typeId);
    }

    public static Collection<{{e.typeName}}> childTypes(String typeId) {
        return BY_PARENT_TYPE.get(typeId);
    }

    @Override
    public Collection<{{e.typeName}}> childTypes(){
        return childTypes(this.typeId);
    }
}

